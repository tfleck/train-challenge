[project]
name = "trainchallenge"
version = "0.1.0"
description = ""
authors = [
    {name = "Theo Fleck",email = "me@theofleck.com"}
]
readme = "README.md"
# limited by azure functions runtime support
requires-python = ">=3.10,<3.12"
dependencies = [
    "geopandas (>=1.0.1,<2.0.0)",
    "geojson (>=3.2.0,<4.0.0)",
    "lxml (>=5.3.1,<6.0.0)",
    "requests (>=2.32.3,<3.0.0)"
]

[tool.poetry.group.api]
optional = true

[tool.poetry.group.api.dependencies]
azure-functions = "^1.21.3"
azure-monitor-opentelemetry = "^1.6.5"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
ipykernel = "^6.29.5"
ipywidgets = "^7.8.5"
tqdm = "^4.67.1"
ruff = "^0.11.2"
pyright = "^1.1.398"
debugpy = "^1.8.13"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
coverage = "^7.8.0"
tox = "^4.25.0"
pytest = "^8.3.5"
pytest-cov = "^6.0.0"

[tool.poetry.requires-plugins]
poetry-plugin-export = ">=1.9"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pyright]
typeCheckingMode = "basic"
useLibraryCodeForTypes = false
include = ["trainchallenge", "function_app"]
check_untyped_defs = true
# enable subset of "strict" settings
reportDuplicateImport = true
reportInconsistentConstructor = true
reportInvalidSubStatement = true
reportMissingParameterType = true
reportOverlappingOverload = true
reportPropertyTypeMismatch = true
reportUntypedClassDecorator = true
reportUntypedFunctionDecorator = true
reportUntypedNamedTuple = true
reportUnusedImport = true
reportUnknownParameterType = true

[tool.ruff]
target-version = "py310"
fix = true
lint.ignore = [
    "ERA", # do not autoremove commented out code
    "F401", # do not autoremove unused imports
]
line-length = 120
lint.extend-select = [
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "C90", # mccabe
    "E", "W", #pycodestyle
    "ERA", # flake8-eradicate
    "F", # pyflakes
    "I", # isort
    "N", # pep8-naming
    "PD", # pandas-vet
    "PGH", # pygrep
    "PIE", # flake8-PIE
    "RUF", # ruff checks
    "S", # flake8-bandit
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP", # pyupgrade
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
force-single-line = true
lines-between-types = 1
lines-after-imports = 2
known-first-party = ["trainchallenge", "function_app"]
relative-imports-order = "closest-to-furthest"

[tool.ruff.lint.per-file-ignores]
"*/__init__.py" = [
    "D104" # Missing docstring in public package
]
"*.ipynb" = [
    "D", # disable all docstring checks
    "ERA" # disable all eradicate checks
]
"tests/*.py" = [
    "D100", # missing docstring in public module
    "D103", # missing docstring in public function
    "E712", # avoid equality comparison to true
    "S101", # use of assert detected
]

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.pytest.ini_options]
pythonpath = ["trainchallenge"]
testpaths = ["tests"]

[tool.coverage.run]
data_file = ".pytest_coverage/.coverage"
concurrency = ["multiprocessing"]
omit = [
    "*/tests/*"
]
branch = true

[tool.coverage.report]
exclude_also = [
    "if TYPE_CHECKING:"
]

[tool.tox]
legacy_tox_ini = """
[tox]
requires = tox>=4
envlist = clean,py{310,311},report

[testenv]
allowlist_externals = poetry
commands = 
    # Disable ruff plugin for better coverage results
    poetry install --with test
    poetry run pytest --cov=trainchallenge --cov-append --cov-report=term-missing {posargs}
depends =
    py{310,311}: clean
    report: py{310,311}

[testenv:clean]
deps = coverage
skip_install = true
commands = coverage erase

[testenv:report]
deps = coverage
skip_install = true
parallel_show_output = true
commands = 
    coverage lcov -o .pytest_coverage/lcov.info
    coverage report
"""